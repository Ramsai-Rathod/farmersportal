const express = require('express');
const router = express.Router();
const Order = require('../models/order');
const Cart = require('../models/cart');
const Product = require('../models/product'); // Assuming you have a Product model

// Create a new order and update cart
router.post('/orders', async (req, res) => {
  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    // Assuming req.body contains the necessary order details
    const order = new Order(req.body);
    
    // Retrieve user's cart
    const userCart = await Cart.findOne({ userId: order.userId }).populate('products.product');

    // Check if all products in the cart are paid
    const allProductsPaid = userCart.products.every(product => product.isPaid);

    if (allProductsPaid) {
      // Move cart products to the order
      order.products = userCart.products.map(cartProduct => {
        return {
          product: cartProduct.product._id,
          quantity: cartProduct.quantity,
          // You can include other product details like price, etc., if needed
        };
      });

      // Update product status to 'ordered'
      await Promise.all(userCart.products.map(async cartProduct => {
        await Product.findByIdAndUpdate(cartProduct.product._id, { status: 'ordered' });
      }));

      // Save the order
      const savedOrder = await order.save();

      // Clear the user's cart
      await Cart.findByIdAndUpdate(userCart._id, { $set: { products: [] } });

      await session.commitTransaction();
      session.endSession();

      res.json(savedOrder);
    } else {
      res.status(400).json({ message: 'Not all products in the cart are paid' });
    }
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    res.status(500).json({ error: error.message });
  }
});

// Update product status in an order
router.put('/orders/:orderId/products/:productId/status', async (req, res) => {
  try {
    const { orderId, productId } = req.params;
    const { status } = req.body;

    const order = await Order.findById(orderId);

    if (!order) {
      return res.status(404).json({ message: 'Order not found' });
    }

    const orderProduct = order.products.find(product => product.product == productId);

    if (!orderProduct) {
      return res.status(404).json({ message: 'Product not found in the order' });
    }

    // Assuming you have a reference to the Product model
    await Product.findByIdAndUpdate(productId, { status });

    // Update the product status in the order
    orderProduct.status = status;

    // Save the updated order
    await order.save();

    res.json({ message: 'Product status updated successfully' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
